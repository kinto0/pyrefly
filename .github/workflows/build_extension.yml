name: build_extension
on:
  workflow_dispatch:
  workflow_call:
  push:

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      pyrefly_version: ${{ steps.pyrefly-version.outputs.PYREFLY_VERSION }}
    steps:
      - name: Checkout repo (to see version.bzl in next step)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history for all branches and tags
      - name: Get version
        id: pyrefly-version
        run: |
          # setting to variable is necessary so sed failures will be red
          VERSION=$(sed -n -e 's/^VERSION = "\(.*\)"/\1/p' version.bzl)
          echo "PYREFLY_VERSION=$VERSION" >> $GITHUB_OUTPUT
  build_extension:
    needs: get_version
    if: success()
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: windows-latest
          #   platform: win32
          #   arch: x64
          #   github_env: $env:GITHUB_ENV
          # - os: windows-latest
          #   platform: win32
          #   arch: arm64
          #   github_env: $env:GITHUB_ENV
          - os: ubuntu-latest
            platform: linux
            arch: x64
            github_env: $GITHUB_ENV
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: arm64
          #   github_env: $GITHUB_ENV
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: armhf
          #   github_env: $GITHUB_ENV
          # - os: ubuntu-latest
          #   platform: alpine
          #   arch: x64
          #   github_env: $GITHUB_ENV
          # - os: ubuntu-latest
          #   platform: alpine
          #   arch: arm64
          #   github_env: $GITHUB_ENV
          # - os: macos-13
          #   platform: darwin
          #   arch: x64
          #   github_env: $GITHUB_ENV
          # - os: macos-14
          #   platform: darwin
          #   arch: arm64
          #   github_env: $GITHUB_ENV
    runs-on: ${{ matrix.os }}
    # For backwards compatibility with GLIBC, build on older ubuntu
    container: ${{ matrix.os == 'ubuntu-latest' && 'ubuntu:20.04' || '' }}
    steps:
      - name: install toolchain dependencies
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          apt-get update && apt-get install -y lsb-release && apt-get clean all && lsb_release -a
